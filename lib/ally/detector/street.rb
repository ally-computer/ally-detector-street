require 'ally/detector'
require 'ally/detector/street/version'

module Ally
  module Detector
    class Street
      include Ally::Detector

      def initialize(inquiry = nil)
        super # do not delete
        @street_suffix = {
          'ALLEY' => %w(ALLEE ALY ALLEY ALLY),
          'ANNEX' => %w(ANEX ANX ANNEX ANNX),
          'ARCADE' => %w(ARC ARCADE),
          'AVENUE' => %w(AV AVE AVEN AVENU AVENUE AVN AVNUE),
          'BAYOO' => %w(BAYOO BYU BAYOU),
          'BEACH' => %w(BCH BEACH),
          'BEND' => %w(BEND BND),
          'BLUFF' => %w(BLF BLUF BLUFF),
          'BLUFFS' => %w(BLUFFS BLFS),
          'BOTTOM' => %w(BOT BTM BOTTM BOTTOM),
          'BOULEVARD' => %w(BLVD BOUL BOULEVARD BOULV),
          'BRANCH' => %w(BR BRANCH BRNCH),
          'BRIDGE' => %w(BRDGE BRG BRIDGE),
          'BROOK' => %w(BRK BROOK),
          'BROOKS' => %w(BROOKS BRKS),
          'BURG' => %w(BURG BG),
          'BURGS' => %w(BURGS BGS),
          'BYPASS' => %w(BYP BYPA BYPAS BYPASS BYPS),
          'CAMP' => %w(CAMP CP CMP),
          'CANYON' => %w(CANYN CYN CANYON CNYN),
          'CAPE' => %w(CAPE CPE),
          'CAUSEWAY' => %w(CAUSEWAY CSWY CAUSWAY),
          'CENTER' => %w(CEN CTR CENT CENTER CENTR CENTRE CNTER CNTR),
          'CENTERS' => %w(CENTERS CTRS),
          'CIRCLE' => %w(CIR CIRC CIRCL CIRCLE CRCL CRCLE),
          'CIRCLES' => %w(CIRCLES CIRS),
          'CLIFF' => %w(CLF CLIFF),
          'CLIFFS' => %w(CLFS CLIFFS),
          'CLUB' => %w(CLB CLUB),
          'COMMON' => %w(COMMON CMN),
          'CORNER' => %w(COR CORNER),
          'CORNERS' => %w(CORNERS CORS),
          'COURSE' => %w(COURSE CRSE),
          'COURT' => %w(COURT CT CRT),
          'COURTS' => %w(COURTS CTS),
          'COVE' => %w(COVE CV),
          'COVES' => %w(COVES CVS),
          'CREEK' => %w(CK CRK CR CREEK),
          'CRESCENT' => %w(CRECENT CRES CRESCENT CRESENT CRSCNT CRSENT CRSNT),
          'CREST' => %w(CREST CRST),
          'CROSSING' => %w(CROSSING XING CRSSING CRSSNG),
          'CROSSROAD' => %w(CROSSROAD XRD),
          'CURVE' => %w(CURVE CURV),
          'DALE' => %w(DALE DL),
          'DAM' => %w(DAM DM),
          'DIVIDE' => %w(DIV DV DIVIDE DVD),
          'DRIVE' => %w(DR DRIV DRIVE DRV),
          'DRIVES' => %w(DRIVES DRS),
          'ESTATE' => %w(EST ESTATE),
          'ESTATES' => %w(ESTATES ESTS),
          'EXPRESSWAY' => %w(EXP EXPY EXPR EXPRESS EXPRESSWAY EXPW),
          'EXTENSION' => %w(EXT EXTENSION EXTN EXTNSN),
          'EXTENSIONS' => %w(EXTENSIONS EXTS),
          'FALL' => ['FALL'],
          'FALLS' => %w(FALLS FLS),
          'FERRY' => %w(FERRY FRY FRRY),
          'FIELD' => %w(FIELD FLD),
          'FIELDS' => %w(FIELDS FLDS),
          'FLAT' => %w(FLAT FLT),
          'FLATS' => %w(FLATS FLTS),
          'FORD' => %w(FORD FRD),
          'FORDS' => %w(FORDS FRDS),
          'FOREST' => %w(FOREST FRST FORESTS),
          'FORGE' => %w(FORG FRG FORGE),
          'FORGES' => %w(FORGES FRGS),
          'FORK' => %w(FORK FRK),
          'FORKS' => %w(FORKS FRKS),
          'FORT' => %w(FORT FT FRT),
          'FREEWAY' => %w(FREEWAY FWY FREEWY FRWAY FRWY),
          'GARDEN' => %w(GARDEN GDN GARDN GRDEN GRDN),
          'GARDENS' => %w(GARDENS GDNS GRDNS),
          'GATEWAY' => %w(GATEWAY GTWY GATEWY GATWAY GTWAY),
          'GLEN' => %w(GLEN GLN),
          'GLENS' => %w(GLENS GLNS),
          'GREEN' => %w(GREEN GRN),
          'GREENS' => %w(GREENS GRNS),
          'GROVE' => %w(GROV GRV GROVE),
          'GROVES' => %w(GROVES GRVS),
          'HARBOR' => %w(HARB HBR HARBOR HARBR HRBOR),
          'HARBORS' => %w(HARBORS HBRS),
          'HAVEN' => %w(HAVEN HVN HAVN),
          'HEIGHTS' => %w(HEIGHT HTS HEIGHTS HGTS HT),
          'HIGHWAY' => %w(HIGHWAY HWY HIGHWY HIWAY HIWY HWAY),
          'HILL' => %w(HILL HL),
          'HILLS' => %w(HILLS HLS),
          'HOLLOW' => %w(HLLW HOLW HOLLOW HOLLOWS HOLWS),
          'INLET' => %w(INLET INLT),
          'ISLAND' => %w(IS ISLAND ISLND),
          'ISLANDS' => %w(ISLANDS ISS ISLNDS),
          'ISLE' => %w(ISLE ISLES),
          'JUNCTION' => %w(JCT JCTION JCTN JUNCTION JUNCTN JUNCTON),
          'JUNCTIONS' => %w(JCTNS JCTS JUNCTIONS),
          'KEY' => %w(KEY KY),
          'KEYS' => %w(KEYS KYS),
          'KNOLL' => %w(KNL KNOL KNOLL),
          'KNOLLS' => %w(KNLS KNOLLS),
          'LAKE' => %w(LAKE LK),
          'LAKES' => %w(LAKES LKS),
          'LAND' => ['LAND'],
          'LANDING' => %w(LANDING LNDG LNDNG),
          'LANE' => %w(LA LN LANE LANES),
          'LIGHT' => %w(LGT LIGHT),
          'LIGHTS' => %w(LIGHTS LGTS),
          'LOAF' => %w(LF LOAF),
          'LOCK' => %w(LCK LOCK),
          'LOCKS' => %w(LCKS LOCKS),
          'LODGE' => %w(LDG LDGE LODG LODGE),
          'LOOP' => %w(LOOP LOOPS),
          'MALL' => ['MALL'],
          'MANOR' => %w(MANOR MNR),
          'MANORS' => %w(MANORS MNRS),
          'MEADOW' => %w(MDW MEADOW),
          'MEADOWS' => %w(MDWS MEADOWS MEDOWS),
          'MEWS' => ['MEWS'],
          'MILL' => %w(MILL ML),
          'MILLS' => %w(MILLS MLS),
          'MISSION' => %w(MISSION MSN MISSN MSSN),
          'MOTORWAY' => %w(MOTORWAY MTWY),
          'MOUNT' => %w(MNT MT MOUNT),
          'MOUNTAIN' => %w(MNTAIN MTN MNTN MOUNTAIN MOUNTIN MTIN),
          'MOUNTAINS' => %w(MNTNS MTNS MOUNTAINS),
          'NECK' => %w(NCK NECK),
          'ORCHARD' => %w(ORCH ORCHARD ORCHRD),
          'OVAL' => %w(OVAL OVL),
          'OVERPASS' => %w(OVERPASS OPAS),
          'PARK' => %w(PARK PK PRK),
          'PARKS' => %w(PARKS PARK),
          'PARKWAY' => %w(PARKWAY PKWY PARKWY PKWAY PKY),
          'PARKWAYS' => %w(PARKWAYS PKWY PKWYS),
          'PASS' => ['PASS'],
          'PASSAGE' => %w(PASSAGE PSGE),
          'PATH' => %w(PATH PATHS),
          'PIKE' => %w(PIKE PIKES),
          'PINE' => %w(PINE PNE),
          'PINES' => %w(PINES PNES),
          'PLACE' => %w(PL PLACE),
          'PLAIN' => %w(PLAIN PLN),
          'PLAINS' => %w(PLAINES PLNS PLAINS),
          'PLAZA' => %w(PLAZA PLZ PLZA),
          'POINT' => %w(POINT PT),
          'POINTS' => %w(POINTS PTS),
          'PORT' => %w(PORT PRT),
          'PORTS' => %w(PORTS PRTS),
          'PRAIRIE' => %w(PR PRAIRIE PRARIE PRR),
          'RADIAL' => %w(RAD RADL RADIAL RADIEL),
          'RAMP' => ['RAMP'],
          'RANCH' => %w(RANCH RNCH RANCHES RNCHS),
          'RAPID' => %w(RAPID RPD),
          'RAPIDS' => %w(RAPIDS RPDS),
          'REST' => %w(REST RST),
          'RIDGE' => %w(RDG RDGE RIDGE),
          'RIDGES' => %w(RDGS RIDGES),
          'RIVER' => %w(RIV RIVER RIVR RVR),
          'ROAD' => %w(RD ROAD),
          'ROADS' => %w(RDS ROADS),
          'ROUTE' => %w(ROUTE RTE),
          'ROW' => ['ROW'],
          'RUE' => ['RUE'],
          'RUN' => ['RUN'],
          'SHOAL' => %w(SHL SHOAL),
          'SHOALS' => %w(SHLS SHOALS),
          'SHORE' => %w(SHOAR SHR SHORE),
          'SHORES' => %w(SHOARS SHRS SHORES),
          'SKYWAY' => %w(SKYWAY SKWY),
          'SPRING' => %w(SPG SPNG SPRING SPRNG),
          'SPRINGS' => %w(SPGS SPNGS SPRINGS SPRNGS),
          'SPUR' => ['SPUR'],
          'SPURS' => %w(SPURS SPUR),
          'SQUARE' => %w(SQ SQR SQRE SQU SQUARE),
          'SQUARES' => %w(SQRS SQS SQUARES),
          'STATION' => %w(STA STATION STATN STN),
          'STRAVENUE' => %w(STRA STRAV STRAVE STRAVEN STRAVENUE STRAVN STRVN STRVNUE),
          'STREAM' => %w(STREAM STRM STREME),
          'STREET' => %w(ST STR STREET STRT),
          'STREETS' => %w(STREETS STS),
          'SUMMIT' => %w(SMT SUMIT SUMITT SUMMIT),
          'TERRACE' => %w(TER TERR TERRACE),
          'THROUGHWAY' => %w(THROUGHWAY TRWY),
          'TRACE' => %w(TRACE TRCE TRACES),
          'TRACK' => %w(TRACK TRAK TRACKS TRK TRKS),
          'TRAFFICWAY' => %w(TRAFFICWAY TRFY),
          'TRAIL' => %w(TR TRL TRAIL TRAILS TRLS),
          'TUNNEL' => %w(TUNEL TUNL TUNLS TUNNEL TUNNELS TUNNL),
          'TURNPIKE' => %w(TPK TPKE TRNPK TRPK TURNPIKE TURNPK),
          'UNDERPASS' => %w(UNDERPASS UPAS),
          'UNION' => %w(UN UNION),
          'UNIONS' => %w(UNIONS UNS),
          'VALLEY' => %w(VALLEY VLY VALLY VLLY),
          'VALLEYS' => %w(VALLEYS VLYS),
          'VIADUCT' => %w(VDCT VIA VIADCT VIADUCT),
          'VIEW' => %w(VIEW VW),
          'VIEWS' => %w(VIEWS VWS),
          'VILLAGE' => %w(VILL VLG VILLAG VILLAGE VILLG VILLIAGE),
          'VILLAGES' => %w(VILLAGES VLGS),
          'VILLE' => %w(VILLE VL),
          'VISTA' => %w(VIS VIST VISTA VST VSTA),
          'WALK' => ['WALK'],
          'WALKS' => %w(WALKS WALK),
          'WALL' => ['WALL'],
          'WAY' => %w(WAY WY),
          'WAYS' => ['WAYS'],
          'WELL' => %w(WELL WL),
          'WELLS' => %w(WELLS WLS)
        }
      end

      def detect
        @datapoints = []
        @inquiry.type_of(:words).reverse.each_with_index do |word, i|
          @street_suffix.each do |street, suffix|
            if suffix.map(&:downcase).include?(word)
              street_name = [street.downcase]
              (1..3).each do |x|
                if @inquiry.type_of(:words).length > (x + i)
                  z = @inquiry.words_info.reverse[i + x][:category]
                  stop_categories = %w(
                    determiner preposition conjunction
                  )
                  break if stop_categories.include?(z)
                  street_name << @inquiry.type_of(:words).reverse[i + x]
                end
              end
              @datapoints << street_name.reverse.join(' ') unless street_name.length <= 1
            end
          end
        end
        if @datapoints.length == 0
          nil
        else
          @data_detected = true
          @datapoints.reverse!
        end
      end
    end
  end
end
